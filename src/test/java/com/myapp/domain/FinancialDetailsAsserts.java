package com.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FinancialDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialDetailsAllPropertiesEquals(FinancialDetails expected, FinancialDetails actual) {
        assertFinancialDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertFinancialDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialDetailsAllUpdatablePropertiesEquals(FinancialDetails expected, FinancialDetails actual) {
        assertFinancialDetailsUpdatableFieldsEquals(expected, actual);
        assertFinancialDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialDetailsAutoGeneratedPropertiesEquals(FinancialDetails expected, FinancialDetails actual) {
        assertThat(expected)
            .as("Verify FinancialDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialDetailsUpdatableFieldsEquals(FinancialDetails expected, FinancialDetails actual) {
        assertThat(expected)
            .as("Verify FinancialDetails relevant properties")
            .satisfies(e -> assertThat(e.getAnnualIncome()).as("check annualIncome").isEqualTo(actual.getAnnualIncome()))
            .satisfies(e -> assertThat(e.getNetWorth()).as("check netWorth").isEqualTo(actual.getNetWorth()))
            .satisfies(e -> assertThat(e.getCurrentSavings()).as("check currentSavings").isEqualTo(actual.getCurrentSavings()))
            .satisfies(
                e -> assertThat(e.getInvestmentExperience()).as("check investmentExperience").isEqualTo(actual.getInvestmentExperience())
            )
            .satisfies(e -> assertThat(e.getSourceOfFunds()).as("check sourceOfFunds").isEqualTo(actual.getSourceOfFunds()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialDetailsUpdatableRelationshipsEquals(FinancialDetails expected, FinancialDetails actual) {}
}
