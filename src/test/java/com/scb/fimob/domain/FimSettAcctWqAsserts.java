package com.scb.fimob.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FimSettAcctWqAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimSettAcctWqAllPropertiesEquals(FimSettAcctWq expected, FimSettAcctWq actual) {
        assertFimSettAcctWqAutoGeneratedPropertiesEquals(expected, actual);
        assertFimSettAcctWqAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimSettAcctWqAllUpdatablePropertiesEquals(FimSettAcctWq expected, FimSettAcctWq actual) {
        assertFimSettAcctWqUpdatableFieldsEquals(expected, actual);
        assertFimSettAcctWqUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimSettAcctWqAutoGeneratedPropertiesEquals(FimSettAcctWq expected, FimSettAcctWq actual) {
        assertThat(expected)
            .as("Verify FimSettAcctWq auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimSettAcctWqUpdatableFieldsEquals(FimSettAcctWq expected, FimSettAcctWq actual) {
        assertThat(expected)
            .as("Verify FimSettAcctWq relevant properties")
            .satisfies(e -> assertThat(e.getSettaccId()).as("check settaccId").isEqualTo(actual.getSettaccId()))
            .satisfies(e -> assertThat(e.getAccountId()).as("check accountId").isEqualTo(actual.getAccountId()))
            .satisfies(e -> assertThat(e.getSettAcctNbr()).as("check settAcctNbr").isEqualTo(actual.getSettAcctNbr()))
            .satisfies(e -> assertThat(e.getSettCcy()).as("check settCcy").isEqualTo(actual.getSettCcy()))
            .satisfies(e -> assertThat(e.getSettAcctStatus()).as("check settAcctStatus").isEqualTo(actual.getSettAcctStatus()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedTs()).as("check createdTs").isEqualTo(actual.getCreatedTs()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedTs()).as("check updatedTs").isEqualTo(actual.getUpdatedTs()))
            .satisfies(e -> assertThat(e.getRecordStatus()).as("check recordStatus").isEqualTo(actual.getRecordStatus()))
            .satisfies(e -> assertThat(e.getUploadRemark()).as("check uploadRemark").isEqualTo(actual.getUploadRemark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimSettAcctWqUpdatableRelationshipsEquals(FimSettAcctWq expected, FimSettAcctWq actual) {}
}
