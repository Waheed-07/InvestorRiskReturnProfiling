package com.scb.fimob.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FimAccountsHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimAccountsHistoryAllPropertiesEquals(FimAccountsHistory expected, FimAccountsHistory actual) {
        assertFimAccountsHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertFimAccountsHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimAccountsHistoryAllUpdatablePropertiesEquals(FimAccountsHistory expected, FimAccountsHistory actual) {
        assertFimAccountsHistoryUpdatableFieldsEquals(expected, actual);
        assertFimAccountsHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimAccountsHistoryAutoGeneratedPropertiesEquals(FimAccountsHistory expected, FimAccountsHistory actual) {
        assertThat(expected)
            .as("Verify FimAccountsHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimAccountsHistoryUpdatableFieldsEquals(FimAccountsHistory expected, FimAccountsHistory actual) {
        assertThat(expected)
            .as("Verify FimAccountsHistory relevant properties")
            .satisfies(e -> assertThat(e.getAccountId()).as("check accountId").isEqualTo(actual.getAccountId()))
            .satisfies(e -> assertThat(e.getHistoryTs()).as("check historyTs").isEqualTo(actual.getHistoryTs()))
            .satisfies(e -> assertThat(e.getCustId()).as("check custId").isEqualTo(actual.getCustId()))
            .satisfies(e -> assertThat(e.getRelnId()).as("check relnId").isEqualTo(actual.getRelnId()))
            .satisfies(e -> assertThat(e.getRelnType()).as("check relnType").isEqualTo(actual.getRelnType()))
            .satisfies(e -> assertThat(e.getOperInst()).as("check operInst").isEqualTo(actual.getOperInst()))
            .satisfies(e -> assertThat(e.getIsAcctNbr()).as("check isAcctNbr").isEqualTo(actual.getIsAcctNbr()))
            .satisfies(e -> assertThat(e.getBndAcctNbr()).as("check bndAcctNbr").isEqualTo(actual.getBndAcctNbr()))
            .satisfies(e -> assertThat(e.getClosingId()).as("check closingId").isEqualTo(actual.getClosingId()))
            .satisfies(e -> assertThat(e.getSubSegment()).as("check subSegment").isEqualTo(actual.getSubSegment()))
            .satisfies(e -> assertThat(e.getBranchCode()).as("check branchCode").isEqualTo(actual.getBranchCode()))
            .satisfies(e -> assertThat(e.getAcctStatus()).as("check acctStatus").isEqualTo(actual.getAcctStatus()))
            .satisfies(e -> assertThat(e.getCtryCode()).as("check ctryCode").isEqualTo(actual.getCtryCode()))
            .satisfies(e -> assertThat(e.getAcctOwners()).as("check acctOwners").isEqualTo(actual.getAcctOwners()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedTs()).as("check createdTs").isEqualTo(actual.getCreatedTs()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedTs()).as("check updatedTs").isEqualTo(actual.getUpdatedTs()))
            .satisfies(e -> assertThat(e.getRecordStatus()).as("check recordStatus").isEqualTo(actual.getRecordStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFimAccountsHistoryUpdatableRelationshipsEquals(FimAccountsHistory expected, FimAccountsHistory actual) {}
}
